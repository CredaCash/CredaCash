/*
 * CredaCash (TM) cryptocurrency and blockchain
 *
 * Copyright (C) 2015-2025 Creda Foundation, Inc., or its contributors
 *
 * map_values.cpp
*/

#include "cclib.h"
#include "map_values.h"

/*
	encoded values range from 0 to enc_max (usually 255, or 254 when 255 is reserved)

	decoded = offset + step * encoded * (base ^ encoded)
		where base is set so that decoded(enc_max) = dec_max

	Decoding uses only integer math, to ensure consistent results on different CPU's

	Using exp_table:
		decoded = offset + step * encoded * exp_table(scaled_encoded) / exp_table(unity_index)

	exp_table table is indexed by a uint32:
		upper 10 bits is table entry index
		lower 22 bits is interpolated position between table entries

			   scaled_encoded = ((exp_index_max		   - unity_index)	   * encoded)		  / enc_max		 + unity_index

	exp_table(scaled_encoded) = ((exp_table[index + 1] - exp_table[index]) * interp_position) / position_max + exp_table[index]

	unity_index is set such that decoded(enc_max) = dec_max = offset + step * enc_max * exp_table(exp_index_max) / exp_table(unity_index)
		i.e., exp_table(unity_index) * dec_max = offset + step * enc_max * exp_table(exp_index_max)
*/

#define EXP_TABLE_BASE	1.013785263792553
#define EXP_TABLE_COEF	3550
#define EXP_TABLE_SIZE	1024

// table of exponential values scaled to [3550, 2^32-1]
//	i.e., exp_table[i] = 3550 * pow(1.01378526379267,i)
// the ratio of min and max = 1209850, which in seconds = 14.003 days

extern array<uint32_t, EXP_TABLE_SIZE> exp_table;

#define EXP_INTERP_BITS		22
#define EXP_INTERP_MAX		(1U << EXP_INTERP_BITS)
#define EXP_INTERP_MASK		(EXP_INTERP_MAX - 1)

static const unsigned EXP_INDEX_MAX = (EXP_TABLE_SIZE - 1) << EXP_INTERP_BITS;

static unsigned map_exp_encoded_to_index(const exp_map_t& params, unsigned enc)
{
	auto val = ((uint64_t)(EXP_INDEX_MAX - params.unity_index) * enc) / params.enc_max + params.unity_index;

	return val;
}

static unsigned map_exp_get_exp(unsigned index)
{
	uint64_t val0 = exp_table[index >> EXP_INTERP_BITS];

	if (index >= EXP_INDEX_MAX)
		return val0;

	uint64_t val1 = exp_table[(index >> EXP_INTERP_BITS) + 1];

	auto pos = index & EXP_INTERP_MASK;

	auto val = ((val1 - val0) * pos + EXP_INTERP_MAX/2) / EXP_INTERP_MAX + val0;

	return val;
}

unsigned map_exp_decode(const exp_map_t& params, unsigned enc)
{
	auto unity = map_exp_get_exp(params.unity_index);

	auto index = map_exp_encoded_to_index(params, enc);

	auto exp = map_exp_get_exp(index);

	auto dec = params.offset + params.step * (uint64_t)enc * exp / unity;

	return dec;
}

void map_exp_init_params(exp_map_t& params, unsigned offset, unsigned step, unsigned enc_max, unsigned dec_max, unsigned unity_index)
{
	params.offset = offset;
	params.step = step;
	params.enc_max = enc_max;
	params.dec_max = dec_max;
	params.unity_index = unity_index;

	//decoded = offset + step * encoded * (base ^ encoded)
	//	where base is set so that decoded(enc_max) = dec_max
	//	--> exp = (dec_max - offset) / step / enc_max = base ^ enc_max
	//	--> base = pow(exp, 1/enc_max)

	auto exp = 1.0 * (dec_max - offset) / step / enc_max;

	params.base = pow(exp, 1.0/enc_max);

	if (unity_index <= EXP_INDEX_MAX)
		return;

	// unity_index should be precomputed
	// nominally, dec_max = offset + step * enc_max * exp_table(enc_max) / exp_table(unity_index)
	//	--> exp_table(unity_index) = exp_table(enc_max) / exp = EXP_TABLE_COEF * 1.013785263792553 ^ unity_index

	auto index = log2(exp_table[EXP_TABLE_SIZE - 1] / exp / EXP_TABLE_COEF) / log2(EXP_TABLE_BASE);

	params.unity_index = index * EXP_INTERP_MAX + 0.5;

	// find smallest unity_index such that decode(enc_max) = dec_max;

	while (true)
	{
		--params.unity_index;

		auto dec = map_exp_decode(params, enc_max);

		//cerr << "down/up search unity_index " << params.unity_index << " map_exp_decode(enc_max) " << dec << endl;

		if (dec > dec_max)
			break;
	}

	while (true)
	{
		++params.unity_index;

		auto dec = map_exp_decode(params, enc_max);

		//cerr << "up/down search unity_index " << params.unity_index << " map_exp_decode(enc_max) " << dec << endl;

		if (dec <= dec_max)
			break;
	}

	cerr << "map_exp_init_params offset " << offset << " step " << step << " enc_max " << enc_max << " dec_max " << dec_max << endl;
	cerr << "map_exp_init_params base " << params.base << " check " << offset + 1.0 * step * enc_max * pow(params.base, enc_max) << endl;
	cerr << "map_exp_init_params unity_index " << params.unity_index << " map_exp_decode(0) = " << map_exp_decode(params, 0) << " map_exp_decode(enc_max) = " << map_exp_decode(params, enc_max) << endl;
}

unsigned map_exp_encode(const exp_map_t& params, unsigned val, bool roundup)
{
	//	decoded = offset + step * encoded * (base ^ encoded)
	//	val - offset / step = enc * base ^ enc ~= enc

	if (val <= params.offset)
		return 0;

	if (val >= params.dec_max)
		return params.enc_max;

	auto enc = (val - params.offset) / params.step;

	if (enc > params.enc_max)
		enc = params.enc_max;

	auto dec = map_exp_decode(params, enc);

	// round up:   find an enc with dec < val, then increase enc until dec >= val
	// round down: find an enc with dec > val, then decrease end until dec <= val

	while (roundup && dec >= val && enc > 0)
		dec = map_exp_decode(params, --enc);

	while ((dec < val || (!roundup && dec <= val)) && enc < params.enc_max)
		dec = map_exp_decode(params, ++enc);

	while (!roundup && dec > val && enc > 0)
		dec = map_exp_decode(params, --enc);

	return enc;
}

void map_exp_test_check(const exp_map_t& params)
{
	for (unsigned i = 0; i <= params.enc_max; ++i)
		cerr << "map_exp_decode(" << i << ") = " << map_exp_decode(params, i) << endl;

	vector<unsigned> histogram;

	cerr << "encode rounding up histogram:" << endl;

	histogram.clear();
	histogram.resize(params.enc_max + 1);

	for (unsigned i = 0; i <= params.dec_max; ++i)
	{
		auto enc = map_exp_encode(params, i);
		CCASSERT(enc <= params.enc_max);
		++histogram[enc];

		auto dec = map_exp_decode(params, enc);
		CCASSERT(dec >= i);
	}

	for (unsigned i = 0; i <= params.enc_max; ++i)
		cerr << histogram[i] << endl;

	cerr << "encode rounding down histogram:" << endl;

	histogram.clear();
	histogram.resize(params.enc_max + 1);

	for (unsigned i = params.offset; i <= params.dec_max; ++i)
	{
		auto enc = map_exp_encode(params, i, false);
		CCASSERT(enc <= params.enc_max);
		++histogram[enc];

		auto dec = map_exp_decode(params, enc);
		CCASSERT(dec <= i);
	}

	for (unsigned i = 0; i <= params.enc_max; ++i)
		cerr << histogram[i] << endl;
}

void map_exp_test()
{
	exp_map_t params;

	map_exp_init_params(params, 10, 5, 255, 172800, -1); // unity_index = 2786840450

	map_exp_test_check(params);
}

array<uint32_t, 1024> exp_table = { 3550, 3599, 3649, 3699, 3750, 3802, 3854, 3907, 3961, 4016, 4071, 4127, 4184, 4242,
4300, 4359, 4419, 4480, 4542, 4605, 4668, 4733, 4798, 4864, 4931, 4999, 5068, 5138, 5209, 5280, 5353, 5427, 5502, 5578,
5654, 5732, 5811, 5892, 5973, 6055, 6139, 6223, 6309, 6396, 6484, 6574, 6664, 6756, 6849, 6944, 7039, 7136, 7235, 7334,
7436, 7538, 7642, 7747, 7854, 7962, 8072, 8183, 8296, 8411, 8526, 8644, 8763, 8884, 9006, 9131, 9256, 9384, 9513, 9645,
9778, 9912, 10049, 10188, 10328, 10470, 10615, 10761, 10909, 11060, 11212, 11367, 11523, 11682, 11843, 12007, 12172,
12340, 12510, 12682, 12857, 13035, 13214, 13396, 13581, 13768, 13958, 14150, 14346, 14543, 14744, 14947, 15153, 15362,
15574, 15788, 16006, 16227, 16450, 16677, 16907, 17140, 17376, 17616, 17859, 18105, 18355, 18608, 18864, 19124, 19388,
19655, 19926, 20201, 20479, 20762, 21048, 21338, 21632, 21930, 22233, 22539, 22850, 23165, 23484, 23808, 24136, 24469,
24806, 25148, 25495, 25846, 26202, 26564, 26930, 27301, 27677, 28059, 28446, 28838, 29235, 29638, 30047, 30461, 30881,
31307, 31738, 32176, 32619, 33069, 33525, 33987, 34456, 34931, 35412, 35900, 36395, 36897, 37406, 37921, 38444, 38974,
39511, 40056, 40608, 41168, 41735, 42311, 42894, 43485, 44085, 44692, 45308, 45933, 46566, 47208, 47859, 48519, 49188,
49866, 50553, 51250, 51956, 52673, 53399, 54135, 54881, 55638, 56405, 57182, 57971, 58770, 59580, 60401, 61234, 62078,
62934, 63801, 64681, 65572, 66476, 67393, 68322, 69264, 70218, 71186, 72168, 73163, 74171, 75194, 76230, 77281, 78346,
79426, 80521, 81631, 82757, 83897, 85054, 86226, 87415, 88620, 89842, 91080, 92336, 93609, 94899, 96207, 97534, 98878,
100241, 101623, 103024, 104444, 105884, 107344, 108823, 110323, 111844, 113386, 114949, 116534, 118140, 119769, 121420,
123094, 124791, 126511, 128255, 130023, 131815, 133632, 135474, 137342, 139235, 141155, 143101, 145073, 147073, 149101,
151156, 153240, 155352, 157494, 159665, 161866, 164097, 166359, 168653, 170978, 173334, 175724, 178146, 180602, 183092,
185616, 188175, 190769, 193398, 196064, 198767, 201507, 204285, 207101, 209956, 212850, 215785, 218759, 221775, 224832,
227932, 231074, 234259, 237488, 240762, 244081, 247446, 250857, 254315, 257821, 261375, 264978, 268631, 272334, 276088,
279894, 283753, 287664, 291630, 295650, 299726, 303857, 308046, 312293, 316598, 320962, 325387, 329872, 334420, 339030,
343703, 348441, 353245, 358114, 363051, 368056, 373129, 378273, 383488, 388774, 394134, 399567, 405075, 410659, 416320,
422059, 427877, 433776, 439755, 445818, 451963, 458194, 464510, 470913, 477405, 483986, 490658, 497422, 504279, 511231,
518278, 525423, 532666, 540009, 547453, 555000, 562651, 570407, 578270, 586242, 594323, 602516, 610822, 619242, 627779,
636433, 645206, 654101, 663117, 672259, 681526, 690921, 700446, 710101, 719890, 729814, 739875, 750074, 760414, 770897,
781524, 792297, 803219, 814292, 825517, 836897, 848434, 860130, 871987, 884007, 896194, 908548, 921073, 933770, 946642,
959692, 972921, 986333, 999930, 1013714, 1027689, 1041856, 1056218, 1070778, 1085539, 1100504, 1115674, 1131054,
1146646, 1162453, 1178478, 1194723, 1211193, 1227890, 1244816, 1261976, 1279373, 1297010, 1314889, 1333015, 1351391,
1370021, 1388907, 1408053, 1427463, 1447141, 1467091, 1487315, 1507818, 1528604, 1549676, 1571039, 1592696, 1614651,
1636910, 1659475, 1682351, 1705543, 1729054, 1752890, 1777054, 1801551, 1826386, 1851563, 1877087, 1902964, 1929196,
1955791, 1982752, 2010085, 2037794, 2065886, 2094365, 2123236, 2152505, 2182178, 2212260, 2242757, 2273674, 2305017,
2336792, 2369005, 2401663, 2434770, 2468334, 2502361, 2536857, 2571828, 2607281, 2643223, 2679661, 2716601, 2754050,
2792015, 2830504, 2869523, 2909080, 2949182, 2989838, 3031053, 3072837, 3115197, 3158141, 3201677, 3245813, 3290557,
3335918, 3381905, 3428525, 3475788, 3523703, 3572278, 3621523, 3671447, 3722059, 3773368, 3825385, 3878119, 3931580,
3985778, 4040723, 4096425, 4152895, 4210144, 4268182, 4327020, 4386669, 4447141, 4508446, 4570596, 4633603, 4697478,
4762234, 4827883, 4894436, 4961907, 5030309, 5099653, 5169953, 5241222, 5313474, 5386721, 5460979, 5536260, 5612578,
5689949, 5768387, 5847905, 5928520, 6010247, 6093099, 6177094, 6262247, 6348574, 6436091, 6524814, 6614760, 6705946,
6798390, 6892107, 6987117, 7083436, 7181083, 7280076, 7380434, 7482175, 7585319, 7689885, 7795892, 7903360, 8012310,
8122762, 8234736, 8348254, 8463337, 8580007, 8698284, 8818192, 8939753, 9062990, 9187926, 9314584, 9442988, 9573162,
9705131, 9838918, 9974550, 10112052, 10251450, 10392769, 10536036, 10681278, 10828522, 10977796, 11129128, 11282546,
11438079, 11595755, 11755606, 11917660, 12081948, 12248501, 12417350, 12588526, 12762062, 12937991, 13116345, 13297157,
13480462, 13666293, 13854687, 14045677, 14239301, 14435593, 14634592, 14836333, 15040856, 15248198, 15458399, 15671497,
15887533, 16106546, 16328579, 16553673, 16781870, 17013212, 17247744, 17485509, 17726551, 17970916, 18218650, 18469799,
18724410, 18982531, 19244210, 19509497, 19778440, 20051091, 20327501, 20607721, 20891804, 21179803, 21471772, 21767766,
22067840, 22372051, 22680456, 22993112, 23310078, 23631414, 23957179, 24287435, 24622244, 24961668, 25305771, 25654618,
26008273, 26366804, 26730278, 27098762, 27472325, 27851038, 28234972, 28624199, 29018791, 29418823, 29824369, 30235506,
30652310, 31074860, 31503235, 31937516, 32377783, 32824119, 33276608, 33735335, 34200386, 34671847, 35149807, 35634357,
36125586, 36623587, 37128452, 37640278, 38159159, 38685193, 39218479, 39759116, 40307206, 40862851, 41426156, 41997227,
42576170, 43163093, 43758108, 44361325, 44972858, 45592820, 46221329, 46858503, 47504459, 48159321, 48823210, 49496251,
50178570, 50870294, 51571555, 52282482, 53003210, 53733873, 54474609, 55225556, 55986855, 56758648, 57541081, 58334300,
59138454, 59953693, 60780171, 61618041, 62467462, 63328593, 64201594, 65086630, 65983866, 66893471, 67815615, 68750472,
69698215, 70659023, 71633077, 72620557, 73621651, 74636545, 75665429, 76708497, 77765944, 78837968, 79924770, 81026554,
82143527, 83275897, 84423877, 85587683, 86767531, 87963645, 89176247, 90405565, 91651829, 92915274, 94196136, 95494654,
96811073, 98145639, 99498603, 100870217, 102260740, 103670431, 105099555, 106548381, 108017178, 109506223, 111015796,
112546178, 114097656, 115670523, 117265071, 118881601, 120520415, 122181821, 123866130, 125573657, 127304723, 129059652,
130838774, 132642421, 134470931, 136324649, 138203920, 140109097, 142040538, 143998605, 145983663, 147996087, 150036252,
152104541, 154201342, 156327048, 158482058, 160666775, 162881609, 165126975, 167403294, 169710992, 172050503, 174422265,
176826722, 179264325, 181735531, 184240803, 186780611, 189355431, 191965745, 194612044, 197294822, 200014583, 202771837,
205567100, 208400897, 211273758, 214186223, 217138837, 220132153, 223166733, 226243145, 229361966, 232523781, 235729183,
238978772, 242273157, 245612957, 248998796, 252431310, 255911143, 259438945, 263015379, 266641116, 270316834, 274043223,
277820981, 281650816, 285533447, 289469601, 293460016, 297505440, 301606631, 305764358, 309979400, 314252548, 318584602,
322976375, 327428689, 331942380, 336518293, 341157287, 345860230, 350628005, 355461504, 360361635, 365329315, 370365476,
375471062, 380647029, 385894349, 391214004, 396606993, 402074325, 407617025, 413236134, 418932703, 424707800, 430562510,
436497927, 442515166, 448615355, 454799636, 461069169, 467425129, 473868707, 480401113, 487023569, 493737317, 500543616,
507443742, 514438988, 521530665, 528720103, 536008649, 543397669, 550888550, 558482694, 566181525, 573986487, 581899042,
589920674, 598052886, 606297202, 614655169, 623128353, 631718342, 640426746, 649255197, 658205351, 667278886, 676477501,
685802922, 695256896, 704841196, 714557618, 724407983, 734394138, 744517955, 754781332, 765186191, 775734485, 786428189,
797269309, 808259877, 819401953, 830697625, 842149011, 853758257, 865527540, 877459065, 889555070, 901817821, 914249618,
926852790, 939629700, 952582743, 965714348, 979026975, 992523120, 1006205313, 1020076119, 1034138137, 1048394004,
1062846392, 1077498010, 1092351604, 1107409959, 1122675898, 1138152281, 1153842010, 1169748027, 1185873312, 1202220888,
1218793820, 1235595215, 1252628221, 1269896031, 1287401883, 1305149058, 1323140882, 1341380728, 1359872015, 1378618209,
1397622825, 1416889424, 1436421619, 1456223070, 1476297489, 1496648639, 1517280336, 1538196445, 1559400889, 1580897642,
1602690733, 1624784247, 1647182327, 1669889169, 1692909032, 1716246230, 1739905137, 1763890188, 1788205880, 1812856769,
1837847478, 1863182690, 1888867155, 1914905687, 1941303167, 1968064544, 1995194833, 2022699120, 2050582561, 2078850382,
2107507883, 2136560435, 2166013484, 2195872552, 2226143234, 2256831206, 2287942219, 2319482106, 2351456779, 2383872231,
2416734538, 2450049862, 2483824445, 2518064620, 2552776805, 2587967507, 2623643322, 2659810937, 2696477133, 2733648781,
2771332851, 2809536405, 2848266606, 2887530712, 2927336085, 2967690185, 3008600577, 3050074930, 3092121017, 3134746721,
3177960031, 3221769049, 3266181985, 3311207165, 3356853029, 3403128134, 3450041153, 3497600880, 3545816231, 3594696243,
3644250079, 3694487028, 3745416506, 3797048061, 3849391370, 3902456245, 3956252634, 4010790620, 4066080427, 4122132418,
4178957101, 4236565127, 4294967295 };